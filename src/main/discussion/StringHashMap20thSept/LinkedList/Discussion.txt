


                      Head1
                      |
1 -> 2 -> 3 -> 4 -> 5
                     \
          10 -> 11 -> 6 -> 7 -> 8 -> 9
                      |
                     Head2

We are given that the two LLs intersect at some point
And we are given the head pointers to these lists

Approach 1:
--Traverse through LL1. Add each node in a HashSet hs
--Traverse through LL2 and :
  --for(every node in LL2) {
    if(hs.contains(node)){
      return node;
    }
  }
  TC : O(N) ....SC : O(N)


  Interviewer asks that we need to do it in O(1) space...i.e. without any EXRTA-space


Approach 2 : O(1) space, TC : O(N)
  --Compute L1 and L2
  --L1 = 9, L2 = 6; The difference(d= Math.abs(L1-L2)) is 3
  --Move the head Pointer of the LONGER list ahead by 'd'
  --while(head1.value != head2.value) {
    head1 = head1.next;
    head2 = head2.next;
  }
  return head1;
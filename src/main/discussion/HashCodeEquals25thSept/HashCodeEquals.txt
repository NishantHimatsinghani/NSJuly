


--  HashCode  :

Returns a hash code value for the object. This method is
     * supported for the benefit of hash tables such as those provided by
     * {@link java.util.HashMap}.
     * <p>
     * The general contract of {@code hashCode} is:
     * <ul>
     * <li>Whenever it is invoked on the same object more than once during
     *     an execution of a Java application, the {@code hashCode} method
     *     must consistently return the same integer, provided no information
     *     used in {@code equals} comparisons on the object is modified.
      --int hc1 = obj1.hashcode();
      .....
      .....
      .....
      -- int hc2 = obj1.hashcode();
      then, hc1 == hc2

      We need some way to compare two objects. And we achieve this using the EQUALS method


     * <li>If two objects are equal according to the {@code equals(Object)}
     *     method, then calling the {@code hashCode} method on each of
     *     the two objects must produce the same integer result.
     * <li>It is <em>not</em> required that if two objects are unequal
     *     according to the {@link java.lang.Object#equals(java.lang.Object)}
     *     method, then calling the {@code hashCode} method on each of the
     *     two objects must produce distinct integer results.  However, the
     *     programmer should be aware that producing distinct integer results
     *     for unequal objects may improve the performance of hash tables.
As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers
for distinct objects. (This is typically implemented by converting the internal address of the object into an integer,
but this implementation technique is not required by the Java™ programming language.)



--Equals :
Indicates whether some other object is "equal to" this one.

  --Every Class in Java is-an OBJECT.. It is a SUBCLASS of the supreme parent class called 'Object'.
  public class foo extends Object {}
  And Object class has some methods in it.
  one of them is equals()
  For primitive datatypes, the equals method compares the value present in that particular variable
  int, long, boolean, char, float, double --> PRIMITIVE..
  What if we want to compare two objects of type Employee....
  Employee emp1;
  Employee emp2;

  public class Employee extends Object{
    int id;
    int name;
    int contactNumber;
    .....
    //If we do not define(override) the equals method here, then by default, the equals method will compare the address to which the two instances are pointing to
    // emp1.equals(emp2) -->


  }

  emp1.equals(emp2)


The equals method implements an equivalence relation on non-null object references:
It is reflexive: for any non-null reference value x, x.equals(x) should return true.
It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.
It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.
It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.
For any non-null reference value x, x.equals(null) should return false.
The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true).
Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.



--Equal objects must have equal Hashcodes...
Always override hashCode when you override equals
A common source of bugs is the failure to override the hashCode method. You
must override hashCode in every class that overrides equals. Failure to do so
will result in a violation of the general contract for Object.hashCode, which will
prevent your class from functioning properly in conjunction with all hash-based
collections, including HashMap, HashSet, and Hashtable.


=========
VERY BAD HASH CODE :
// The worst possible legal hash function - never use!
@Override public int hashCode() { return 42; }

It’s legal because it ensures that equal objects have the same hash code. It’s
atrocious because it ensures that every object has the same hash code. Therefore,
every object hashes to the same bucket, and hash tables degenerate to linked lists.
Programs that should run in linear time instead run in quadratic time. For large
hash tables, this is the difference between working and not working.


Discussion during lecture :
--hashcode :
  returns an integer...
  what is this used for ? --> it is used to compare an object with what ? -->
  --it is used in Hashing datastructures to decide upon the BUCKET(this I will explain in greater detail while explaining HashMap implementation)
    to which we put the data.
  --if two objects are EQUAL, then they need to have the same hashCode.....THE RIGHT HAND THUMB RULE

  --WHENEVER YOU OVERRIDE THE EQUALS METHOD IN A CLASS, YOU SHOULD ALSO OVERRIDE AN APPROPRIATE HASHCODE METHOD
--equals :





























=====
Topics covered in NS instructor sessions in the past week :
